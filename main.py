from config.configvalidator import ConfigValidator
from client.client import Client
from modules.claim import Claimer
from utils.logger import logger
import asyncio
import json

with open("abi/claimer_abi.json", "r", encoding="utf-8") as f:
    CLAIMER_ABI = json.load(f)


async def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...\n")
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n")
        validator = ConfigValidator("config/settings.json")
        settings = await validator.validate_config()

        with open("constants/constants.json", "r", encoding="utf-8") as file:
            constants = json.load(file)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client = Client(
            proxy=settings["proxy"],
            amount=settings["amount"],
            rpc_url=constants["rpc_url"],
            chain_id=constants["chain_id"],
            private_key=settings["private_key"],
            explorer_url=constants["explorer_url"],
            contract_address=constants["contract_address"]
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        claimer_contract = await client.get_contract(client.contract_address, CLAIMER_ABI)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–µ–π–º–µ—Ä–∞
        claimer = Claimer(client, claimer_contract)

        # –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        result = await claimer_contract.functions.registeredUsers(client.address).call()
        if not result:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            register = await claimer.register()
            if register:
                logger.info(f"‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–µ–π–º!\n")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å!\n")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        amount_in_wei = await client.to_wei_main(client.amount)
        tokens = await claimer_contract.functions.claimableTokens(client.address).call()
        if tokens == 0:
            logger.error(f"‚ùóÔ∏è –ó–∞–ø–∞—Å —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!")
            exit(1)
        if tokens < amount_in_wei:
            logger.error(f"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–µ–π–º–∞!"
                         f" –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ {await client.from_wei_main(tokens)}.")
            exit(1)

        # –ö–ª–µ–π–º —Ç–æ–∫–µ–Ω–æ–≤
        claim = await claimer.claim()
        if claim:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫–ª–µ–π–∏–ª–∏ {client.amount} —Ç–æ–∫–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏: {e}")


if __name__ == "__main__":
    asyncio.run(main())
