from config.configvalidator import ConfigValidator
from client.client import Client
from modules.claim import Claimer
from utils.logger import logger
import asyncio
import json
from typing import Dict, Any, Tuple

with open("abi/claimer_abi.json", "r", encoding="utf-8") as f:
    CLAIMER_ABI = json.load(f)


async def load_settings() -> Tuple[Dict[str, Any], Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n")
    validator = ConfigValidator("config/settings.json")
    settings = await validator.validate_config()

    with open("constants/constants.json", "r", encoding="utf-8") as file:
        constants = json.load(file)
    
    return settings, constants


async def initialize_client(settings: Dict[str, Any], constants: Dict[str, Any]) -> Client:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    return Client(
        proxy=settings["proxy"],
        amount=settings["amount"],
        rpc_url=constants["rpc_url"],
        chain_id=constants["chain_id"],
        private_key=settings["private_key"],
        explorer_url=constants["explorer_url"],
        contract_address=constants["contract_address"]
    )


async def check_registration(client: Client, claimer_contract, claimer: Claimer) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    result = await claimer_contract.functions.registeredUsers(client.address).call()
    if not result:
        register = await claimer.register()
        if register:
            logger.info(f"‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–µ–π–º!\n")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å!\n")
            return False
    return True


async def check_available_tokens(client: Client, claimer_contract) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–ª–µ–π–º–∞"""
    amount_in_wei = await client.to_wei_main(client.amount)
    tokens = await claimer_contract.functions.claimableTokens(client.address).call()
    
    if tokens == 0:
        logger.error(f"‚ùóÔ∏è –ó–∞–ø–∞—Å —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!")
        return False
    
    if tokens < amount_in_wei:
        logger.error(f"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–µ–π–º–∞!"
                    f" –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ {await client.from_wei_main(tokens)}.")
        return False
    
    return True


async def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...\n")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings, constants = await load_settings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client = await initialize_client(settings, constants)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        claimer_contract = await client.get_contract(client.contract_address, CLAIMER_ABI)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–µ–π–º–µ—Ä–∞
        claimer = Claimer(client, claimer_contract)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not await check_registration(client, claimer_contract, claimer):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        if not await check_available_tokens(client, claimer_contract):
            return

        # –ö–ª–µ–π–º —Ç–æ–∫–µ–Ω–æ–≤
        claim = await claimer.claim()
        if claim:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫–ª–µ–π–º–∏–ª–∏ {client.amount} —Ç–æ–∫–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏: {e}")


if __name__ == "__main__":
    asyncio.run(main())
